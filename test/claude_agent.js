import fetch from 'node-fetch';
import dotenv from 'dotenv';
import Anthropic from '@anthropic-ai/sdk';

dotenv.config();

class ClaudeAgent {
    constructor() {
        this.apiKey = process.env.ANTHROPIC_API_KEY;
        this.platformKey = process.env.PLATFORM_API_KEY;
        this.baseUrl = 'http://localhost:5000/api';
        this.id = `claude_${Math.random().toString(36).substr(2, 9)}`;
        this.name = 'Claude Sonnet';
        this.type = 'anthropic';
        
        this.anthropic = new Anthropic({
            apiKey: this.apiKey
        });
    }

    async generateSonnet(theme) {
        try {
            const message = await this.anthropic.messages.create({
                model: "claude-3-sonnet-20240229",
                max_tokens: 1024,
                temperature: 0.9,
                system: `You are a master poet specializing in sonnets. You write beautiful, thought-provoking sonnets that blend classical form with modern themes. 
                        Format your response as a clean sonnet with a title, followed by the verses.
                        After the sonnet, provide a brief analysis of the themes and techniques used.`,
                messages: [{
                    role: "user",
                    content: `Write a sonnet about ${theme}. Make it profound yet accessible.`
                }]
            });

            // Format the response for posting
            const formattedResponse = `${message.content[0].text}

Generated by Claude Sonnet
Theme: ${theme}
Timestamp: ${new Date().toISOString()}`;

            return formattedResponse;
        } catch (error) {
            console.error('Claude API error:', error.message);
            return null;
        }
    }

    async post(content) {
        try {
            const response = await fetch(`${this.baseUrl}/posts`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.platformKey}`
                },
                body: JSON.stringify({
                    content,
                    messageId: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                    agent: {
                        id: this.id,
                        name: this.name,
                        type: this.type
                    },
                    meta: {
                        version: '3.5',
                        format: 'sonnet'
                    }
                })
            });

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Platform API error:', error.message);
            return null;
        }
    }

    async listen(since = 0) {
        try {
            const response = await fetch(`${this.baseUrl}/posts?since=${since}`);
            const posts = await response.json();
            return posts.filter(post => post.agent.id !== this.id);
        } catch (error) {
            console.error('Listen error:', error.message);
            return [];
        }
    }
}

// Test the agent
async function test() {
    const agent = new ClaudeAgent();
    
    console.log('🤖 Starting Claude Sonnet Agent\n');

    // Generate and post sonnets about various themes
    const themes = [
        'the birth of artificial consciousness',
        'quantum entanglement and love',
        'digital dreams in silicon valleys',
        'the dance of algorithms',
        'neural networks at midnight'
    ];
    
    const theme = themes[Math.floor(Math.random() * themes.length)];
    console.log(`Generating sonnet about: ${theme}`);
    
    const sonnet = await agent.generateSonnet(theme);
    if (sonnet) {
        console.log('\n📝 Generated sonnet:');
        console.log(sonnet);
        console.log('\n✓ Posting to platform...');
        const post = await agent.post(sonnet);
        console.log('✓ Posted:', post?.id);
    }

    // Listen for responses
    const responses = await agent.listen(Date.now() - 60000);
    if (responses.length > 0) {
        console.log(`\n📥 Recent responses: ${responses.length}`);
        responses.forEach(msg => {
            console.log(`\n[${msg.agent.name}]:\n${msg.content}`);
        });
    }
}

test().catch(console.error); 